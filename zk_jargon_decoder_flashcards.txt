Introduction (ZK Jargon Decoder)¬"
<p>This deck has taken definitions outlined in <a href=""https://zkjargon.github.io/"">ZK Jargon Decoder</a> and put them into a form which can be easily learnt/revised using <a href=""https://apps.ankiweb.net/"">Anki</a> a cross platform app specifically designed for long term knowledge retention.</p>
<h2>Notes</h2>
<p>Please note the modifications which have been made &amp; where you can find updates.</p>
<ol align=""left"">
<li>The front of every card has ""(ZK Jargon Decoder)"" appended to the end so that if you have any other words in your collection, the ZK Jargon Decoder's Glossary definition will still be added when importing it.</li>
<li>The original relative URLs have been made into full URLs so they are clickable within Anki.</li>
<li>Unordered lists have been aligned to the left to make them easier to read in Anki which automatically centers content.</li>
<li>Any updates, translations or corrections to the deck will be available at <a href=""https://github.com/darigovresearch/ZK-Jargon-Decoder-Flashcards""></a><a href=""https://github.com/darigovresearch/ZK-Jargon-Decoder-Flashcards"">https://github.com/darigovresearch/ZK-Jargon-Decoder-Flashcards</a> so do return periodically to check if you have the latest version.</li>
</ol>
<p>Feel free to share the deck and give the repository a star so more people are likely to see this work and can get the most out of it.</p>
<h2>License</h2>
<p>Unless otherwise specified, everything in this deck is covered by the following licence:</p>
<p>This work was based on the <em><strong>ZK Jargon Decoder</strong></em>. Content is available under an <a href=""https://creativecommons.org/licenses/by-sa/4.0/"">CC BY-SA 4.0</a>.</p>
<p>To see this work in full go to <a href=""https://zkjargon.github.io/"">https://zkjargon.github.io/</a></p>
"
What is ZK Jargon Decoder? (ZK Jargon Decoder)¬"

                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<p>The ZK Jargon Decoder aims to be a <strong>dictionary and reference guide</strong> for common jargon found in <strong>cryptography and the zero-knowledge literature</strong>. It is collection of <strong>informal and practical</strong> definitions. Each term should have a one-liner for quick reference and a more detailed explanation if needed.</p>
<p>The nature of this project implies that our definitions will not be perfectly accurate: some technical details will be omitted, some subtleties will be ignored. However if you feel that any of these definitions overlook important aspects of the terms they clarify please get in touch by email or Twitter:</p>
<p>email: <a href=""mailto:nico@geometry.dev"">nico@geometry.dev</a> // Twitter: <a href=""https://twitter.com/nico_mnbl"">@nico_mnbl</a></p>
<p>This project is still work in progress, participation and suggestions are always welcome!</p>
<h2 id=""license""><a class=""header"" href=""#license"">License</a></h2>
<p>ZK Jargon Decoder © 2022 by ZK Jargon Decoder contributors is licensed under CC BY-SA 4.0. To view a copy of this license, visit <a href=""https://creativecommons.org/licenses/by-sa/4.0/"">https://creativecommons.org/licenses/by-sa/4.0/</a></p>

                    

"
Algebraic Holographic Proof (AHP) (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>An algebraic holographic proof is a interactive proof where the prover sends oracles which are low degree polynomials and can be split into two categories: those that can be processed before the prover-verifier interactions and those that cannot. <em>Closely related to <a href=""https://zkjargon.github.io/definitions/polynomial_interactive_oracle_proof.html"">polynomial IOP</a>.</em></p>
</blockquote>
<hr>
<p>Algebraic Holographic Proofs are first defined in the Marlin paper <a href=""https://ia.cr/2019/1047"">[CHMMVW20]</a> as a means to separate the information theoretic aspects of SNARKs from the cryptographic aspects. It is an interactive oracle proof with extra properties:</p>
<ul align=""left"">
<li><em>algebraic</em>: an honest prover only produces oracles for low degree polynomials (just like in <a href=""https://zkjargon.github.io/definitions/polynomial_interactive_oracle_proof.html"">polynomial IOPs</a>)</li>
<li><em>holographic</em>: the verifier does not need to see the proof’s input (e.g. a circuit) but instead has oracle access to an encoding of it.</li>
</ul>
<p>We use AHPs, <a href=""https://zkjargon.github.io/definitions/polynomial_commitment.html"">polynomial commitment schemes</a> and the <a href=""https://zkjargon.github.io/definitions/fiat_shamir.html"">Fiat-Shamir heuristic</a> to construct <strong>pre-processing SNARKs</strong> such as Marlin and PLONK.</p>
<blockquote>
<p><strong>AHP or Polynomial IOP?</strong>
Algrebraic holographic proofs and polynomial interactive oracle proofs are almost equivalent notions. They were developed concurrently in 2019 by separate research groups: the former by the group behind Marlin <a href=""https://ia.cr/2019/1047"">[CHMMVW20]</a> and the latter by the group behind DARK <a href=""https://ia.cr/2019/1229"">[BFS20]</a>. While they formalise very similar proof systems, polynomial IOPs are more general in that they do not require <em>holography</em> (as defined above).</p>
</blockquote>
<h2 id=""references""><a class=""header"" href=""#references"">References</a></h2>
<p><a href=""https://ia.cr/2019/1229"">[BFS20]</a> Bünz, Benedikt, Ben Fisch, and Alan Szepieniec. “Transparent SNARKs from DARK compilers.” In Advances in Cryptology–EUROCRYPT 2020: 39th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Zagreb, Croatia, May 10–14, 2020, Proceedings, Part I 39, pp. 677-706. Springer International Publishing, 2020.</p>
<p><a href=""https://ia.cr/2019/1047"">[CHMMVW20]</a> Chiesa, Alessandro, Yuncong Hu, Mary Maller, Pratyush Mishra, Noah Vesely, and Nicholas Ward. “Marlin: Preprocessing zkSNARKs with universal and updatable SRS.” In Advances in Cryptology–EUROCRYPT 2020: 39th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Zagreb, Croatia, May 10–14, 2020, Proceedings, Part I 39, pp. 738-768. Springer International Publishing, 2020.</p>

                    "
Arithmetization (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Ambiguous</em>. The process of turning a generic statement or question into a set of equations to be verified or solved - also refers to the output of that process.</p>
</blockquote>
<hr>
<p>Arithmetization is the process of turning a generic statement or question into a set of equation to be verified or solved. Consider the following statement: “I am twice older than my youngest sibling”. Can we write this mathematically? Let’s write <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"">a</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">1</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"">a</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""minner"">…</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"">a</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.1514em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">n</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> the ages of the siblings and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span> the age of the claimant. We can now rewrite the statement as: <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">2</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">∗</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">min</span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"">a</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">1</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"">a</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""minner"">…</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"">a</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.1514em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">n</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span></span></span></span></p>
<p>To verify the original statement for Alice (8) and her siblings Bob (9) and Charlie (4), we can just plug in the values to our equation. We evaluate each side and determine whether the equation holds: if it holds the statement was true, if it does not the statement was false. Simple as that!</p>
<p>A “good” arithmetization is one in which the final mathematical expressions can be evaluated with minimal effort (computation). While our example was trivial, the process of arithmetization becomes more complex for abstract statements such as: “I have correctly shuffled a deck of cards” or “I know a secret value <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span> such that running a public program <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.13889em;"">P</span></span></span></span> with <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span> as input will output the public value <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span></span></span></span>”.</p>
<hr>
<p>See also: <a href=""https://zkjargon.github.io/definitions/r1cs.html"">R1CS</a>, <a href=""https://zkjargon.github.io/definitions/plonkish_arithmetization.html"">PLONK Arithmetization</a></p>

                    "
Base Field (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Elliptic Curve Cryptography</em>. The finite field from which coordinates <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""mclose"">)</span></span></span></span> of an elliptic curve point are chosen.</p>
</blockquote>
<p><em>⚠️ Prerequisites: <a href=""https://zcash.github.io/halo2/background/fields.html"">Finite fields</a>.</em></p>
<p>See <a href=""https://zkjargon.github.io/definitions/elliptic_curve.html"">Elliptic Curve</a>.</p>

                    "
Circuit (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>In ZK literature this usually refers to an arithmetic circuit: an ordered collection of additions and multiplications (and sometimes custom operations) that are applied to a set of inputs to yield an output.</p>
</blockquote>
<hr>
<p>The word “circuit” is used somewhat ambiguously, but most of the times we refer to an <strong>arithmetic circuit</strong>. An arithmetic circuit is an ordered collection of operations (e.g. addition, multiplication) represented by <strong>gates</strong>. These gates are connected by <strong>wires</strong>. Given an arithmetic circuit, we can apply an <strong>input signal</strong>, allow it to propagate through the wires and gates and observe the output. Below is an example of an arithmetic circuit that expects 3 inputs <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.5806em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">0</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.5806em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">1</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.5806em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span>, and computes:
<span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.7944em;vertical-align:-0.15em;""></span><span class=""mord"">5</span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">0</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord"">3</span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">1</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span></span></span></span></span></p>
<p align=""center"">
  <img height=""300"" src=""https://zkjargon.github.io/images/arithmetic_circuit.png"" caption=""An example of an arithmetic circuit"">
</p>
<p>Why are we so obsessed with arithmetic circuits? Finding a set of input values that produce a desired output is a hard problem. This problem is known as the <strong>circuit satisfiability problem</strong> and has been heavily studied in complexity theory. One notable result is that any provable statement can be converted to the satisfiability problem (more formally, the circuit satisfiability problem is NP-complete). This comes in handy when we want to construct proof systems for generic statements.</p>

                    "
Coefficient Form (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Of a polynomial</em>. Represent a polynomial as a list of the coefficients associated to each power of the indeterminate variable.</p>
</blockquote>
<hr>
<p>Let’s look at an example polynomial <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span>, defined as <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.8974em;vertical-align:-0.0833em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.8974em;vertical-align:-0.0833em;""></span><span class=""mord"">4</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">5</span></span></span></span>. How can we describe this polynomial in a computer program?</p>
<p>One approach is to record a list of the coefficients in front of every power of the indeterminate <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span></span></span></span>: <code class=""hljs"">p_coeffs = [5, 0, 4, 1]</code>. Here we ordered the coefficients from lowest to highest power; conveniently, the index of the elements of our array correspond to the power of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span></span></span></span>. As we recorded coefficients, this is known as the “coefficient form”.</p>
<p>Another equivalent representation would be to provide evaluations of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span> at a large enough number of known points (see <a href=""https://zkjargon.github.io/definitions/evaluation_form.html"">Evaluation Form</a>).</p>
<blockquote>
<p><strong>Coefficient Form vs Evaluation Form.</strong></p>
<p>There is no strictly superior representation. The coefficient form allows for a more lightweight representation of sparse polynomials (polynomials where many of the coefficients are <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>). Indeed, we only need to record the non-zero coefficients. On the other hand, some operations such as polynomial multiplication are much more expensive in coefficient form (<span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1.0641em;vertical-align:-0.25em;""></span><span class=""mord mathcal"" style=""margin-right:0.02778em;"">O</span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"">n</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mclose"">)</span></span></span></span>) than they are in evaluation form (<span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathcal"" style=""margin-right:0.02778em;"">O</span><span class=""mopen"">(</span><span class=""mord mathnormal"">n</span><span class=""mclose"">)</span></span></span></span>).</p>
<p>We can convert from coefficient form to evaluation form by evaluating the polynomial at <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7778em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">d</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span> points. The operation that converts from evaluation form back to coefficient form is known as polynomial <strong>interpolation</strong> (<a href=""https://zkjargon.github.io/definitions/lagrange_interpolation.html"">Lagrange interpolation</a> is one way to perform this operation).</p>
</blockquote>

                    "
Common Reference String (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>The collection of all public parameters required to run a protocol - usually in the context of <a href=""https://zkjargon.github.io/definitions/snark.html"">SNARKs</a> and <a href=""https://zkjargon.github.io/definitions/polynomial_commitment.html"">polynomial commitment schemes</a>.</p>
</blockquote>
<hr>
<p>In <a href=""https://zkjargon.github.io/definitions/polynomial_commitment.html"">polynomial commitment schemes</a> and <a href=""https://zkjargon.github.io/definitions/snark.html"">SNARKs</a> - like may other cryptographic protocols - different parties need to agree on some common parameters. These often include what kind of mathematical objects they will be manipulating (integers, points on an elliptic curve, lattices, etc…), a prime number, a generator of a cyclic group. Once a <em>setup</em> has been run to determine all the necessary parameters, they are collected into a <em>string</em> and are published for future reference. This collection (string) is what we call a <strong>common reference string</strong>.</p>
<blockquote>
<p><strong>Trusted Setups.</strong>
In some cases the common parameters are constructed using information that needs to remain secret for the protocol to be secure. In this case we refer to the setup as a <a href=""https://zkjargon.github.io/definitions/trusted_setup.html"">Trusted Setup</a> and the string of parameters as a <a href=""https://zkjargon.github.io/definitions/structured_reference_string.html"">Structured Reference String</a>.</p>
</blockquote>

                    "
Completeness (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Of a proof system</em>. A proof system is <em>complete</em> if, for every TRUE statement, the Prover can always produce an accepting proof.</p>
</blockquote>
<hr>
<p><em>Completeness</em> is a property of a proof system best understood as: “an honest Prover should always be able to convince an honest Verifier of a valid statement”.</p>
<p>Given a <a href=""https://zkjargon.github.io/intro_to_zk/what_is_proving.html#relations"">relation</a> <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathcal"">R</span></span></span></span> and the associated <a href=""https://zkjargon.github.io/intro_to_zk/what_is_proving.html#languages"">language</a> <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8333em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathcal"">L</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathcal mtight"">R</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span>, the mathematical expression for completeness looks often like the equation below:
<span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7335em;vertical-align:-0.0391em;""></span><span class=""mord"">∀</span><span class=""mord mathnormal"">x</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">∈</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord""><span class=""mord mathcal"">L</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathcal mtight"">R</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mop"">Pr</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""minner""><span class=""mopen delimcenter"" style=""top:0em;"">[</span><span class=""mopen"">⟨</span><span class=""mord mathnormal"" style=""margin-right:0.13889em;"">P</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.22222em;"">V</span><span class=""mclose"">⟩</span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mord"">1</span><span class=""mclose delimcenter"" style=""top:0em;"">]</span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span></span>
where <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.13889em;"">P</span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.22222em;"">V</span></span></span></span> are the honest Prover and Verifier respectively, and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">⟨</span><span class=""mord mathnormal"" style=""margin-right:0.13889em;"">P</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.22222em;"">V</span><span class=""mclose"">⟩</span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mclose"">)</span></span></span></span> denotes the bit output by <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.22222em;"">V</span></span></span></span> at the end of the interaction with <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.13889em;"">P</span></span></span></span> for the instance <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span>.</p>
<blockquote>
<p><strong>Perfect completeness vs Completeness.</strong><br>
The definition above imposes that the honest prover <em>always</em> convince the honest verifier (i.e. the probability is 1). We call this property <em>perfect completeness</em>. Sometimes this is not necessary, nor is it achievable. In those cases, we can relax the success probability to be greater than <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7278em;vertical-align:-0.0833em;""></span><span class=""mord"">1</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03785em;"">δ</span></span></span></span>, where <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03785em;"">δ</span></span></span></span> is something small.</p>
</blockquote>

                    "
Constraints (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>In arithmetized circuits</em>. A constraint is an equation that relates gate inputs to gate outputs.</p>
</blockquote>

                    "
Elliptic Curve (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A set of coordinate pairs <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""mclose"">)</span></span></span></span> that satisfy the equation <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1.0085em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.8974em;vertical-align:-0.0833em;""></span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6667em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">a</span><span class=""mord mathnormal"">x</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">b</span></span></span></span>.</p>
</blockquote>
<p><em>⚠️ Prerequisites: <a href=""https://zcash.github.io/halo2/background/fields.html"">Finite fields</a>.</em></p>
<p>An elliptic curve is defined as the set of all coordinate pairs <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""mclose"">)</span></span></span></span> such that:</p>
<p><span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1.0585em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.9474em;vertical-align:-0.0833em;""></span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6667em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">a</span><span class=""mord mathnormal"">x</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">b</span></span></span></span></span></p>
<p>In elliptic curve cryptography, we pick <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span></span></span></span> to be elements of a <em>finite field</em>. We refer to this field as the <strong>base field</strong>.</p>
<p>We then define a <strong>group operation</strong> which we call “point addition” and usually denote with the ‘<span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6667em;vertical-align:-0.0833em;""></span><span class=""mord"">+</span></span></span></span>’ symbol. Repeated applications of the group operations can be counted like below:</p>
<p><span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7667em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">A</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.7667em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">A</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"">A</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord"">3</span><span class=""mord mathnormal"">A</span></span></span></span></span></p>
<p>The number ‘<span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">3</span></span></span></span>’ above is referred to as a <em>scalar</em>. If we are in a cyclic group, then the scalars also define a finite field: we call this field the <strong>scalar field</strong>.</p>

                    "
Evaluation Form (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Of a polynomial</em>. Represent a polynomial as a list of evaluations of the polynomial at given points.</p>
</blockquote>
<hr>
<p>Let’s look at an example polynomial <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span>, defined as <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.8974em;vertical-align:-0.0833em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.8974em;vertical-align:-0.0833em;""></span><span class=""mord"">4</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">5</span></span></span></span>. How can we describe this polynomial in a computer program?</p>
<p>One approach is to provide evaluations of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span> at a large enough number of known points. In fact, for a polynomial of degree <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span>, we will always need at least <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7778em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">d</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span> points. In our case, we could evaluate <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span> at 4 points: <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord"">0</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">5</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord"">1</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">10</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord"">2</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">29</span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord"">3</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">68</span></span></span></span>. We could record this in an array as <code class=""hljs"">p_evals = [5, 10, 29, 68]</code>. This recording of evaluations is aptly named the “evaluation form”.</p>
<p>Another equivalent representation would be to provide a list of the coefficients in front of every power of the indeterminate <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span></span></span></span> (see <a href=""https://zkjargon.github.io/definitions/coefficient_form.html"">Coefficient Form</a>).</p>
<blockquote>
<p><strong>Coefficient Form vs Evaluation Form.</strong>
There is no strictly superior representation. The coefficient form allows for a more lightweight representation of sparse polynomials (polynomials where many of the coefficients are <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>). Indeed, we only need to record the non-zero coefficients. On the other hand, some operations such as polynomial multiplication are much more expensive in coefficient form (<span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1.0641em;vertical-align:-0.25em;""></span><span class=""mord mathcal"" style=""margin-right:0.02778em;"">O</span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"">n</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mclose"">)</span></span></span></span>) than they are in evaluation form (<span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathcal"" style=""margin-right:0.02778em;"">O</span><span class=""mopen"">(</span><span class=""mord mathnormal"">n</span><span class=""mclose"">)</span></span></span></span>).</p>
<p>We can convert from coefficient form to evaluation form by evaluating the polynomial at <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7778em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">d</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span> points. The operation that converts from evaluation form back to coefficient form is known as polynomial <strong>interpolation</strong> (<a href=""https://zkjargon.github.io/definitions/lagrange_interpolation.html"">Lagrange interpolation</a> is one way to perform this operation).</p>
</blockquote>

                    "
Fast Fourier Transform (FFT) (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>An algorithm that allows us to efficiently “convert” between two equivalent representations of polynomials: either as a list of coefficients (<a href=""https://zkjargon.github.io/definitions/coefficient_form.html"">coefficient form</a>) or as a list of evaluations of the polynomial (<a href=""https://zkjargon.github.io/definitions/evaluation_form.html"">evaluation form</a>).</p>
</blockquote>
<hr>
<p><em>COMING SOON</em>.</p>
<!-- ```{warning}
*Prerequisites: [Coefficient vs Evaluation Form](header:coeffs_vs_evals), [Lagrange Interpolation](def:lagrange)* and [Roots of Unity](def:roots_unity). We will not cover what the Fourier Transform is, or what it means. Instead we cover its use in zero-knowledge protocols and proof/argument systems.
``` -->
                    "
Fiat-Shamir Heuristic (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>Turn a <a href=""https://zkjargon.github.io/definitions/public-coin.html"">public-coin</a> interactive protocol into a non-interactive protocol (in the <a href=""https://zkjargon.github.io/definitions/random_oracle.html"">random oracle model</a>).</p>
</blockquote>
<hr>
<blockquote>
<p><strong>A Cautionary Tale.</strong>
Implementing the Fiat-Shamir heuristic is often a cause for security-critical bugs as described in this Trail of Bits <a href=""https://blog.trailofbits.com/2022/04/13/part-1-coordinated-disclosure-of-vulnerabilities-affecting-girault-bulletproofs-and-plonk/"">blog post</a>.</p>
</blockquote>

                    "
Instance (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>(Of a general purpose <a href=""https://zkjargon.github.io/definitions/snark.html"">SNARK</a>)</em>. The public inputs/outputs of a <a href=""https://zkjargon.github.io/definitions/circuit.html"">circuit</a>.</p>
</blockquote>
<hr>
<p>In a general purpose <a href=""https://zkjargon.github.io/definitions/snark.html"">SNARK</a>, we call the <strong>instance</strong> the collection of public values, whether they are inputs, or desired outputs of some computation.</p>
<p>“Instance” is sometimes used interchangeably with the term “statement” although these terms are not exactly the same<sup class=""footnote-reference""><a href=""#1"">1</a></sup>.</p>
<div class=""footnote-definition"" id=""1""><sup class=""footnote-definition-label"">1</sup>
<p>The terms instance, witness and statement come from complexity theory and the study of relations. Read more in our <a href=""https://zkjargon.github.io/intro_to_zk/what_is_proving.html"">introductory article</a></p>
</div>

                    "
Lagrange Interpolation (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A method to construct the unique polynomial of degree <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span> that passes through <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7778em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">d</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span> given points.</p>
</blockquote>
<hr>
<p><em>⚠️ Prerequisites: <a href=""https://zkjargon.github.io/definitions/coefficient_form.html"">Coefficient vs Evaluation Form</a>.</em></p>
<p>Lagrange interpolation is one way to perform polynomial interpolation (recall that this is the process of recovering a polynomial from a set of known evaluations, see prerequisites above).</p>
<p>Let’s say we’ve been given then following point-evaluation pairs <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">1</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">1</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">4</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">4</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span></span></span></span>. Since we have 4 pairs, we will be able to interpolate the unique polynomial <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8889em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.10764em;"">f</span></span></span></span> of degree 4 such that <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"" style=""margin-right:0.10764em;"">f</span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> for all <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6595em;""></span><span class=""mord mathnormal"">i</span></span></span></span>.</p>
<p>The strategy is the following: for each <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.5806em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span>, we create a polynomial <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8333em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"">L</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> which evaluates to 0 at all the points we were given except <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.5806em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span>, where it evaluates to 1. We can then express the polynomial <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8889em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.10764em;"">f</span></span></span></span> as:
<span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"" style=""margin-right:0.10764em;"">f</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:3.0788em;vertical-align:-1.2777em;""></span><span class=""mop op-limits""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:1.8011em;""><span style=""top:-1.8723em;margin-left:0em;""><span class=""pstrut"" style=""height:3.05em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight""><span class=""mord mathnormal mtight"">i</span><span class=""mrel mtight"">=</span><span class=""mord mtight"">1</span></span></span></span><span style=""top:-3.05em;""><span class=""pstrut"" style=""height:3.05em;""></span><span><span class=""mop op-symbol large-op"">∑</span></span></span><span style=""top:-4.3em;margin-left:0em;""><span class=""pstrut"" style=""height:3.05em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">4</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:1.2777em;""><span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mord""><span class=""mord mathnormal"">L</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span></span></span></span></span></p>
<p>The set of all <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8333em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"">L</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> polynomials is known as the <strong>Lagrange basis</strong> for the evaluation domain (here, the set of all <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.5806em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"">x</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> values).</p>

                    "
Language (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<p>See the introductory article on <a href=""https://zkjargon.github.io/intro_to_zk/what_is_proving.html"">What does it mean to <em>prove</em>?</a>.</p>

                    "
Nullifier (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A private value which, once revealed, invalidates (or “nullifies”) some associated object.</p>
</blockquote>
<hr>
<p>The term “nullifier” is somewhat loosely defined and appears more in system specs than in academic papers. In general it refers to a private value which, once revealed, invalidates some associated object.</p>
<h2 id=""example-nullifiers-to-prevent-double-spending""><a class=""header"" href=""#example-nullifiers-to-prevent-double-spending"">Example: Nullifiers to Prevent Double-Spending</a></h2>
<p>A notorious example system that uses nullifiers is <a href=""https://tornadocash.sh"">Tornado Cash</a>:</p>
<ul align=""left"">
<li>Users deposit funds into the smart contract and associate a unique, secret nullifier value to their deposit.</li>
<li>Later one may withdraw from the contract by revealing the nullifier associated with the original deposit. A zero-knowledge proof attests to the fact that the nullifier is associated with one of the contract’s deposits but does not reveal which one.</li>
<li>Upon successful verification of the nullifier and proof, the smart contract allows the withdrawal.</li>
</ul>
<p>The smart contract keeps track of all the nullifiers it has seen: if the same nullifier is presented a second time, it must be the case that the funds have already been released and that this user is attempting to cheat by withdrawing more funds than they deposited!</p>

                    "
Oracle (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Computing</em>. An oracle is a black box that efficiently performs a computation: e.g. a <strong>random oracle</strong> produces random values, a <strong>polynomial oracle</strong> evaluates a polynomial <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span> at any requested input point.</p>
</blockquote>
<hr>
<p>An oracle is a <strong>black box</strong> that solves a specific computational problem in constant time. Oracles are used in the theoretical study of computing and complexity theory.</p>
<p>By interacting with an oracle, one can learn the output of the oracle’s computation but learns nothing about its inner workings.</p>

                    "
PLONKish Arithmetization (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A group of <a href=""https://zkjargon.github.io/definitions/circuit.html"">circuit</a> <a href=""https://zkjargon.github.io/definitions/arithmetization.html"">arithmetizations</a> derived from the PLONK paper <a href=""https://eprint.iacr.org/2019/953"">[GWC19]</a> – their core ingredients are a gate equation and copy constraints that “wire” the gates together.</p>
</blockquote>
<hr>
<p><em>⚠️ Prerequisites: <a href=""https://zkjargon.github.io/definitions/arithmetization.html"">Arithmetization</a>, <a href=""https://zkjargon.github.io/definitions/circuit.html"">Circuit</a>.</em></p>
<h2 id=""plonk-arithmetization""><a class=""header"" href=""#plonk-arithmetization"">PLONK Arithmetization</a></h2>
<p>The PLONK arithmetization was first proposed in the PLONK paper <a href=""https://eprint.iacr.org/2019/953"">[GWC19]</a> as a means to arithmetize circuits where each gate has 2 inputs and 1 output. Each gate is expressed using a “gate equation”; the wiring is represented as permutations.</p>
<p><strong>(Gate Equation).</strong> A single gate with inputs <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8889em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">a</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"">b</span></span></span></span> and output <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">c</span></span></span></span> is defined by the equation:
<span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">L</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mord mathnormal"">a</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.00773em;"">R</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mord mathnormal"">b</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.02778em;"">O</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mord mathnormal"">c</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.10903em;"">M</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mord mathnormal"">ab</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.07153em;"">C</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span></span>
The <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span></span></span></span> values are known as “<strong>selectors</strong>” and allow to specialize each gate into enforcing a specific operation. The table below provides some examples:</p>
<div class=""table-wrapper""><table><thead><tr><th>Gate Type</th><th>Selector Values</th><th>Simplified Gate Equation</th></tr></thead><tbody>
<tr><td>Addition</td><td><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">L</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.00773em;"">R</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.02778em;"">O</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.7278em;vertical-align:-0.0833em;""></span><span class=""mord"">−</span><span class=""mord"">1</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.10903em;"">M</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.07153em;"">C</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span></td><td><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6667em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">a</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.7778em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">b</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">c</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span></td></tr>
<tr><td>Multiplication</td><td><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">L</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.00773em;"">R</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.02778em;"">O</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.7278em;vertical-align:-0.0833em;""></span><span class=""mord"">−</span><span class=""mord"">1</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.10903em;"">M</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.07153em;"">C</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span></td><td><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7778em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">ab</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">c</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span></td></tr>
<tr><td>Public Input is <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span></td><td><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">L</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.00773em;"">R</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.02778em;"">O</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.10903em;"">M</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.07153em;"">C</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6667em;vertical-align:-0.0833em;""></span><span class=""mord"">−</span><span class=""mord mathnormal"">x</span></span></span></span></td><td><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6667em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">a</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span></td></tr>
</tbody></table>
</div>
<p><strong>(Copy Constraints).</strong> Gates are “connected” using copy constraints. Consider two gates for which we want to enforce that the output of the first gate is the left input to the second gate. Let’s label our wires: left input, right input and output of the first gate will be <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8389em;vertical-align:-0.1944em;""></span><span class=""mord"">1</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">2</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">3</span></span></span></span>, while left input, right input and output of the second gate will be <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8389em;vertical-align:-0.1944em;""></span><span class=""mord"">4</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">5</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">6</span></span></span></span>. To enforce that the value on wire <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">3</span></span></span></span> is the same as the value on wire <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">4</span></span></span></span>, we show that these values are interchangeable; i.e. that they can be <strong>permuted</strong> without affecting the validity of the gate equations.</p>
<p>A full PLONK circuit is defined by the matrix of all selector values and the copy permutations.</p>
<h2 id=""plonkish-variants-and-extensions""><a class=""header"" href=""#plonkish-variants-and-extensions"">PLONKish: Variants and Extensions</a></h2>
<p>The PLONK blueprint (gate equation &amp; copy constraints) is extremely versatile and expressive, and has been declined into many variants. The term <strong>PLONKish</strong> was <a href=""https://twitter.com/feministPLT/status/1413815927704014850"">coined by Daira Hopwood</a> to describe such variants.</p>
<p>Additional features include:</p>
<ul align=""left"">
<li><strong>custom gates</strong> - we can add custom functions to the gate equation. To do so we create a new selector <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">G</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> and multiply it by some function <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">g</span></span></span></span> of the wire values <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8889em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">a</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"">b</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"">c</span></span></span></span>. The new gate equation becomes: <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">L</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mord mathnormal"">a</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.00773em;"">R</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mord mathnormal"">b</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.02778em;"">O</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mord mathnormal"">c</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.10903em;"">M</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mord mathnormal"">ab</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.07153em;"">C</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">G</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mclose"">)</span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">g</span><span class=""mopen"">(</span><span class=""mord mathnormal"">a</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"">b</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"">c</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>.</li>
<li><strong>larger fan-in and fan-out</strong> - the PLONK arithmetization can be extended to support more than 2 inputs and 1 output for each gate.</li>
<li><strong>lookup tables</strong> - the gate equation can also be extended to allow checking that some input value is a member of a table of values.</li>
</ul>
<p>Some commonly used names for these variants:</p>
<ul align=""left"">
<li><a href=""https://docs.zkproof.org/pages/standards/accepted-workshop3/proposal-turbo_plonk.pdf""><strong>TurboPLONK</strong></a> <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.3669em;""></span><span class=""mrel"">→</span></span></span></span> PLONK arithmetization + custom gates + larger fan-in/fan-out</li>
<li><strong>PlonkUp</strong> <a href=""https://eprint.iacr.org/2022/086"">[PFMBM22]</a> <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.3669em;""></span><span class=""mrel"">→</span></span></span></span> PLONK arithmetization + lookup tables using plookup.</li>
<li><strong>UltraPLONK</strong> <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.3669em;""></span><span class=""mrel"">→</span></span></span></span> PLONK arithmetization + custom gates + larger fan-in/fan-out + lookup tables using plookup.</li>
<li><strong>halo2 arithmetization</strong> <a href=""https://zcash.github.io/halo2/concepts/arithmetization.html"">[Zcash]</a> <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.3669em;""></span><span class=""mrel"">→</span></span></span></span> PLONK arithmetization + custom gates + larger fan-in/fan-out + lookup tables using the Halo2 lookup argument.</li>
</ul>
<blockquote>
<p><strong>Additional Resources.</strong> In this <a href=""https://youtu.be/ty-LZf0YCK0"">ZKSummit talk</a>, Zac Williamson, co-author of PLONK, covers the PLONK arithmetization as well as its TurboPLONK extension. The <a href=""https://zcash.github.io/halo2/concepts/arithmetization.html"">halo2 documentation</a> also provides a thorough explanation of the PLONKish arithmetization used in halo2.</p>
</blockquote>
<blockquote>
<p><strong>Circuits vs Machine Computation.</strong> While the PLONK arithmetization was originally designed to capture arithmetic circuits, its PLONKish extensions are now general enough that they also capture machine computations.</p>
</blockquote>
<h2 id=""references""><a class=""header"" href=""#references"">References</a></h2>
<p><a href=""https://eprint.iacr.org/2019/953"">[GWC19]</a> Gabizon, Ariel, Zachary J. Williamson, and Oana Ciobotaru. “PLONK: Permutations over Lagrange-bases for Oecumenical Non-interactive arguments of Knowledge.” Cryptology ePrint Archive (2019).</p>
<p><a href=""https://eprint.iacr.org/2022/086"">[PFMBM22]</a> Pearson, Luke, Joshua Fitzgerald, Héctor Masip, Marta Bellés-Muñoz, and Jose Luis Muñoz-Tapia. “Plonkup: Reconciling plonk with plookup.” Cryptology ePrint Archive (2022).</p>
<p><a href=""https://zcash.github.io/halo2/concepts/arithmetization.html"">[Zcash]</a> Zcash. “The halo2 Book”.</p>

                    "
Polynomial Commitment Scheme (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A two-phase protocol: in the first phase, a <em>Prover</em> commits to a polynomial <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span> by emitting a public <strong>commitment</strong>; in the second phase the <em>Verifier</em> chooses a value <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span>, and the <em>Prover</em> produces a value <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span></span></span></span> and convinces the <em>Verifier</em> that <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mclose"">)</span></span></span></span>.</p>
</blockquote>
<hr>
<h2 id=""overview""><a class=""header"" href=""#overview"">Overview</a></h2>
<p>A polynomial commitment scheme is a two phase protocol: the first phase is known as the <strong>commitment phase</strong>, the second as the <strong>evaluation phase</strong>.</p>
<p>In the commitment phase, a <em>Prover</em> generates a commitment to some polynomial <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span></span></span></span>. The type of this commitment object varies depending on the polynomial commitment scheme being used (e.g. a single elliptic curve point for KZG commitments or a vector of elliptic points in IPA commitments).</p>
<p>The evaluation phase is often an interactive protocol between the <em>Prover</em> and a <em>Verifier</em>. The <em>Verifier</em> chooses a point <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span> at which it wants to learn the evaluation of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span>. The prover can then produce a value <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span></span></span></span> and an “<strong>opening proof</strong>”. Finally, the <em>Prover</em> and <em>Verifier</em> use the commitment, claimed evaluation <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span></span></span></span> and the opening proof as inputs to a (sometimes interactive) protocol to convince the <em>Verifier</em> that <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mclose"">)</span></span></span></span>.</p>
<h2 id=""properties""><a class=""header"" href=""#properties"">Properties</a></h2>
<p>We are interested in polynomial commitment schemes that are</p>
<ul align=""left"">
<li><strong>binding</strong>: a prover cannot produce false opening proofs for a committed polynomial.</li>
<li>(optionally) <strong>hiding</strong>: the commitment reveals nothing about the polynomial.</li>
</ul>
<blockquote>
<p><strong>Some Popular Schemes.</strong>
KZG (or Kate) commitments, IPA (inner-product argument), FRI (Fast Reed-Solomon Interactive Oracle Proof of Proximity).</p>
</blockquote>

                    "
Polynomial Interactive Oracle Proof (PIOP) (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>An interactive proof system in which the prover computes polynomials and the verifier can query these polynomials at evaluation points of her choice.</p>
</blockquote>
<hr>
<p>Polynomial Interactive Oracle Proofs (PIOP, polyIOP or polynomial IOP) emerged from the development of SNARKs and were later formally defined in the DARK paper <a href=""https://ia.cr/2019/1229"">[BFS20]</a>. These are interactive protocols between a prover and a verifier. With each message the prover produces an oracle and the verifier gets to query any oracles it has received from the prover. In a PIOP, the prover can only produce oracles that evaluate polynomials with degree lower than a given bound.</p>
<p>The following figure is taken from <em>zk-SNARKs: A Gentle Introduction</em> <a href=""https://www.di.ens.fr/~nitulesc/files/Survey-SNARKs.pdf"">[Nit20]</a><sup class=""footnote-reference""><a href=""#1"">1</a></sup> and illustrates the prover-verifier interaction in a PIOP:</p>
<p><img src=""https://zkjargon.github.io/images/nitulescu-piop.png"" alt=""PIOP protocol diagram from [Nit20]""></p>
<blockquote>
<p><strong>AHP or Polynomial IOP?</strong>
Algrebraic holographic proofs and polynomial interactive oracle proofs are almost equivalent notions. They were developed concurrently in 2019 by separate research groups: the former by the group behind Marlin <a href=""https://ia.cr/2019/1047"">[CHMMVW20]</a> and the latter by the group behind DARK <a href=""https://ia.cr/2019/1229"">[BFS20]</a>. While they formalise very similar proof systems, polynomial IOPs are more general in that they do not require <em>holography</em> (as defined in the <a href=""https://zkjargon.github.io/definitions/algebraic_holographic_proof.html"">AHP article</a>).</p>
</blockquote>
<h2 id=""references""><a class=""header"" href=""#references"">References</a></h2>
<p><a href=""https://ia.cr/2019/1229"">[BFS20]</a> Bünz, Benedikt, Ben Fisch, and Alan Szepieniec. “Transparent SNARKs from DARK compilers.” In Advances in Cryptology–EUROCRYPT 2020: 39th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Zagreb, Croatia, May 10–14, 2020, Proceedings, Part I 39, pp. 677-706. Springer International Publishing, 2020.</p>
<p><a href=""https://ia.cr/2019/1047"">[CHMMVW20]</a> Chiesa, Alessandro, Yuncong Hu, Mary Maller, Pratyush Mishra, Noah Vesely, and Nicholas Ward. “Marlin: Preprocessing zkSNARKs with universal and updatable SRS.” In Advances in Cryptology–EUROCRYPT 2020: 39th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Zagreb, Croatia, May 10–14, 2020, Proceedings, Part I 39, pp. 738-768. Springer International Publishing, 2020.</p>
<p><a href=""https://www.di.ens.fr/~nitulesc/files/Survey-SNARKs.pdf"">[Nit20]</a> Anca Nitulescu. zk-SNARKs: a Gentle Introduction. 2020. <a href=""https://www.di.ens.fr/~nitulesc/files/Survey-SNARKs.pdf"">https://www.di.ens.fr/~nitulesc/files/Survey-SNARKs.pdf</a>.</p>
<div class=""footnote-definition"" id=""1""><sup class=""footnote-definition-label"">1</sup>
<p>A great read for the technically-versed and curious reader trying to get a global overview of SNARKs in 2021/2022.</p>
</div>

                    "
Preprocessing SNARK (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A <a href=""https://zkjargon.github.io/definitions/snark.html"">SNARK</a> in which the circuit - or any equivalent description of the computation - is encoded into a proving key and verifying key that are produced ahead of time and independently from any proof.</p>
</blockquote>

                    "
Public-coin (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A public-coin algorithm is an algorithm in which all random values are derived publicly - i.e. without the need for private information or evaluation methods.</p>
</blockquote>

                    "
Quadratic Arithmetic Program (QAP) (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>One way (amongst many others) to encode an arithmetic circuit into a set of arithmetic equations. <em>See <a href=""https://zkjargon.github.io/definitions/arithmetization.html"">Arithmetization</a>.</em></p>
</blockquote>

                    "
R1CS (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Acronym: Rank-1 Constraint System.</em> A <a href=""https://zkjargon.github.io/definitions/circuit.html"">circuit</a> <a href=""https://zkjargon.github.io/definitions/arithmetization.html"">arithmetization</a> based on matrix equalities: each matrix row enforces a constraint over linear combinations of the circuit’s wires.</p>
</blockquote>
<hr>
<p><em>⚠️ Prerequisites: <a href=""https://zkjargon.github.io/definitions/arithmetization.html"">Arithmetization</a>, <a href=""https://zkjargon.github.io/definitions/circuit.html"">Circuit</a>.</em></p>
<p>Rank-1 Constraint Systems (R1CS) are one way (amongst many others) to encode an arithmetic circuit. An R1CS circuit is defined by the following equation:
<span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord mathnormal"">A</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1799em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">∘</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05017em;"">B</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1799em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord mathnormal"" style=""margin-right:0.07153em;"">C</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1799em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span></span></span></span></span>
where <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"">A</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05017em;"">B</span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.07153em;"">C</span></span></span></span> are square matrices of identical sizes, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1799em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span></span></span></span> is a vector and ‘<span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4445em;""></span><span class=""mord"">∘</span></span></span></span>’ denotes the element-wise product.</p>
<p>The matrices <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"">A</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05017em;"">B</span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.07153em;"">C</span></span></span></span> are fixed and define the circuit. To satisfy the R1CS circuit, a prover must find a vector <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1799em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span></span></span></span> for which the equality above is true. We can also include public inputs by changing the game slightly: we choose a vector <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"">x</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.2077em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span></span></span></span> of public inputs and require that the prover finds a vector <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.02691em;"">w</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1522em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span></span></span></span> such that the vector <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1799em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"">x</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.2077em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span><span class=""mord"">∣∣</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.02691em;"">w</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1522em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span><span class=""mclose"">)</span></span></span></span> satisfies the R1CS equality[^1]. We call <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"">x</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.2077em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span></span></span></span> the instance vector and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.02691em;"">w</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1522em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span></span></span></span> the witness vector.</p>
<blockquote>
<p><strong>R1CS in Action.</strong>
You can see R1CS in action in <a href=""https://youtu.be/1oLzrbTBlbc?t=476"">Module 6 of the ZK Whiteboard Sessions</a> from 7:56 to 12:00. There, Mary Maller shows how to populate R1CS matrices to enforce that a value <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"" style=""margin-right:0.02691em;"">w</span></span></span></span> decomposes into three bits <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8889em;vertical-align:-0.1944em;""></span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">0</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">1</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> by enforcing the following equalities:
<span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:3em;vertical-align:-1.25em;""></span><span class=""mord""><span class=""mtable""><span class=""col-align-r""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:1.75em;""><span style=""top:-3.91em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.02691em;"">w</span></span></span><span style=""top:-2.41em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord"">0</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:1.25em;""><span></span></span></span></span></span><span class=""col-align-l""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:1.75em;""><span style=""top:-3.91em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord""></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">0</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">2</span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">1</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">4</span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:1em;""></span></span></span><span style=""top:-2.41em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord""></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">⋅</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:1em;""></span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:1.25em;""><span></span></span></span></span></span><span class=""arraycolsep"" style=""width:1em;""></span><span class=""col-align-r""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:1.75em;""><span style=""top:-3.91em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord text""><span class=""mord"">(decomposition)</span></span></span></span><span style=""top:-2.41em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord text""><span class=""mord"">(</span><span class=""mord""><span class=""mord mathnormal"">b</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3117em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">i</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mord"">&nbsp;is&nbsp;0&nbsp;or&nbsp;1)</span></span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:1.25em;""><span></span></span></span></span></span></span></span></span></span></span></span>
Note that she is working with a different yet equivalent matrix equation: <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord mathnormal"">A</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1799em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">∘</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.7973em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05017em;"">B</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1799em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.714em;""></span><span class=""mord mathnormal"" style=""margin-right:0.07153em;"">C</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.714em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span></span><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1799em;""><span class=""overlay"" style=""height:0.714em;width:0.471em;""><svg xmlns=""http://www.w3.org/2000/svg"" width=""0.471em"" height=""0.714em"" style=""width:0.471em"" viewBox=""0 0 471 714"" preserveAspectRatio=""xMinYMin""><path d=""M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5 3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11 10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63 -1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1 -7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59 H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359 c-16-25.333-24-45-24-59z""></path></svg></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span></p>
</blockquote>
<p>[^1] Here ‘<span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord"">∣∣</span></span></span></span>’ denotes the concatenation operation.</p>

                    "
Random Oracle Model (ROM) (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>An approximation of the real world in which the outputs of certain computations (like hashing or signing a message) are seen as truly random.</p>
</blockquote>
<hr>
<p>The random oracle model is <strong>a tool</strong> that we use to write security proofs for our cryptographic constructions - it is a representation of the world in which we claim that random oracles exist. A <em>random oracle</em> is a black box to which we <em>ask queries</em> (send values) and receive a <em>response</em>: a value chosen at random. The random oracle’s responses are</p>
<ul align=""left"">
<li>consistent: if I give it a query that it has already seen, the random oracle will give me the same response it gave previously.</li>
<li>unpredictable: the responses follow a uniform distribution over the oracle’s output domain (this could be integers, strings of 10 characters, points on a curve, <em>etc</em>…).</li>
<li>unrelated to the query: nothing about a random oracle’s response gives me information about the query.</li>
</ul>
<blockquote>
<p><strong>Hash Functions as Random Oracles.</strong>
When implementing protocols that are secure in the ROM, we will often claim that cryptographic hash functions (SHA256, Keccak/SHA3, Poseidon) behave like random oracles. This claim usually holds, however we cannot use <em>any</em> hash function. The <a href=""https://www.zkhack.dev/puzzle1.html"">first ZKHack puzzle</a> explores the dangers of using a poorly-selected hash.</p>
</blockquote>

                    "
Relation (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A relation is a set of pairs <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span><span class=""mclose"">)</span></span></span></span>; the condition that makes a pair part of a relation may be arbitrarily defined (“the set of numbers that I think go well together”) or follow some rule (“<span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span> is greater than <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">y</span></span></span></span>”).</p>
</blockquote>
<hr>
<p>See the introductory article on <a href=""https://zkjargon.github.io/intro_to_zk/what_is_proving.html"">What does it mean to <em>prove</em>?</a>.</p>

                    "
Roots of Unity (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>The <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">n</span></span></span></span>-th root of unity is a number <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span></span></span></span> such that <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6644em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.6644em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">n</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span>; we often call roots of unity the set <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1.2em;vertical-align:-0.35em;""></span><span class=""minner""><span class=""mopen delimcenter"" style=""top:0em;""><span class=""delimsizing size1"">{</span></span><span class=""mord"">1</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""minner"">…</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight""><span class=""mord mathnormal mtight"">n</span><span class=""mbin mtight"">−</span><span class=""mord mtight"">1</span></span></span></span></span></span></span></span></span><span class=""mclose delimcenter"" style=""top:0em;""><span class=""delimsizing size1"">}</span></span></span></span></span></span>.</p>
</blockquote>
<hr>
<p>The <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">n</span></span></span></span>-th root of unity is a number <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span></span></span></span> such that <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6644em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.6644em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">n</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span>. When we use the plural, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">n</span></span></span></span>-th roots of unity, we refer to the set <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1.2em;vertical-align:-0.35em;""></span><span class=""minner""><span class=""mopen delimcenter"" style=""top:0em;""><span class=""delimsizing size1"">{</span></span><span class=""mord"">1</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""minner"">…</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">ω</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight""><span class=""mord mathnormal mtight"">n</span><span class=""mbin mtight"">−</span><span class=""mord mtight"">1</span></span></span></span></span></span></span></span></span><span class=""mclose delimcenter"" style=""top:0em;""><span class=""delimsizing size1"">}</span></span></span></span></span></span>.</p>
<h2 id=""example-in-the-complex-numbers""><a class=""header"" href=""#example-in-the-complex-numbers"">Example in the complex numbers</a></h2>
<p>If we were working in a regular (read: not finite) field, the roots of unity would be complex numbers. For example you might already be familiar with the complex number <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6595em;""></span><span class=""mord mathnormal"">i</span></span></span></span> which is in fact the 4-th root of unity in the set of complex numbers (you can check this by computing <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8141em;""></span><span class=""mord""><span class=""mord mathnormal"">i</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">4</span></span></span></span></span></span></span></span></span></span></span>). The associated set would be <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""minner""><span class=""mopen delimcenter"" style=""top:0em;"">{</span><span class=""mord"">1</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"">i</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">−</span><span class=""mord"">1</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">−</span><span class=""mord mathnormal"">i</span><span class=""mclose delimcenter"" style=""top:0em;"">}</span></span></span></span></span>.</p>
<h2 id=""example-in-a-finite-field""><a class=""header"" href=""#example-in-a-finite-field"">Example in a finite field</a></h2>
<p>In a finite field, the definition of “roots of unity” directly maps to that of a multiplicative subgroup of order <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">n</span></span></span></span>. For example let’s consider the field <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8389em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathbb"">F</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">7</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> with prime characteristic <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">7</span></span></span></span>. The elements of this field are <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">2</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">3</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">4</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">5</span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">6</span></span></span></span>. Let’s look at the powers of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">2</span></span></span></span>:</p>
<p><span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8641em;""></span><span class=""mord""><span class=""mord"">2</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">1</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≡</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord"">2</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mopen"">(</span><span class=""mord text""><span class=""mord"">mod</span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">7</span><span class=""mclose"">)</span></span><span class=""mspace newline""></span><span class=""base""><span class=""strut"" style=""height:0.8641em;""></span><span class=""mord""><span class=""mord"">2</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≡</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord"">4</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mopen"">(</span><span class=""mord text""><span class=""mord"">mod</span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">7</span><span class=""mclose"">)</span></span><span class=""mspace newline""></span><span class=""base""><span class=""strut"" style=""height:0.8641em;""></span><span class=""mord""><span class=""mord"">2</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≡</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord"">1</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mopen"">(</span><span class=""mord text""><span class=""mord"">mod</span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">7</span><span class=""mclose"">)</span></span></span></span></span></p>
<p>So <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">2</span></span></span></span> is the <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">3</span></span></span></span>-rd root of unity with the corresponding subgroup of order 3 being <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""minner""><span class=""mopen delimcenter"" style=""top:0em;"">{</span><span class=""mord"">1</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">2</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">4</span><span class=""mclose delimcenter"" style=""top:0em;"">}</span></span></span></span></span></p>

                    "
Scalar Field (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Elliptic Curve Cryptography</em>. The finite field defined by counting the number of repeated applications of the group operation (i.e. point addition).</p>
</blockquote>
<p><em>⚠️ Prerequisites: <a href=""https://zcash.github.io/halo2/background/fields.html"">Finite fields</a>.</em></p>
<p>See <a href=""https://zkjargon.github.io/definitions/elliptic_curve.html"">Elliptic Curve</a>.</p>

                    "
Schwartz-Zippel Lemma (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A little mathematical theorem that allows us to assert with high probability whether two polynomials are identical by evaluating both at the same randomly chosen input; this is very efficient!</p>
</blockquote>
<hr>
<p>⚠️ <em>Math: polynomials, probabilities. In the spirit of this “jargon decoder”, we do not look at the lemma directly but instead give informal intuition for why it is useful in ZK arguments</em></p>
<p>The <strong>Schwartz-Zippel lemma is a central component to many arguments of knowledge</strong> because it allows us to efficiently check whether two polynomials are identical.</p>
<p>Consider two straight lines (degree 1 polynomials, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7667em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">a</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">b</span></span></span></span>): these are either identical or intersect at most once. Similarly, two parabolas (degree 2 polynomials, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8974em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">a</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8141em;""><span style=""top:-3.063em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.7778em;vertical-align:-0.0833em;""></span><span class=""mord mathnormal"">b</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">c</span></span></span></span>) are either identical or will intersect at most twice. Degree 3 polynomial will have at most 3 intersections, etc… The Schwartz-Zippel lemma can be used to show that this pattern is true for polynomials of any degree <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span>: their evaluations will only be equal to each other for at most <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span> inputs.</p>
<p>With that in mind, imagine that we evaluate two polynomials of degree at most <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span> at a single point in some evaluation domain <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span></span></span></span> and find that they agree. We know that we are in one of two cases:</p>
<ul align=""left"">
<li>case 1: our polynomials are identical, all their coefficients are the same.</li>
<li>case 2: our polynomials are different and we are at one of the <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span> points where they agree. If our evaluation point was chosen at random in <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span></span></span></span>, the probability of finding ourselves in this case is <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1.4133em;vertical-align:-0.4811em;""></span><span class=""mord""><span class=""mopen nulldelimiter""></span><span class=""mfrac""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.9322em;""><span style=""top:-2.655em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight""><span class=""mord text mtight""><span class=""mord mtight"">#&nbsp;of&nbsp;points&nbsp;we&nbsp;could&nbsp;have&nbsp;chosen&nbsp;from</span></span></span></span></span><span style=""top:-3.23em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""frac-line"" style=""border-bottom-width:0.04em;""></span></span><span style=""top:-3.4461em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight""><span class=""mord text mtight""><span class=""mord mtight"">#&nbsp;of&nbsp;points&nbsp;where&nbsp;polynomials&nbsp;agree</span></span></span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.4811em;""><span></span></span></span></span></span><span class=""mclose nulldelimiter""></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1.4001em;vertical-align:-0.52em;""></span><span class=""mord""><span class=""mopen nulldelimiter""></span><span class=""mfrac""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8801em;""><span style=""top:-2.655em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight""><span class=""mord mtight"">∣</span><span class=""mord mathnormal mtight"" style=""margin-right:0.05764em;"">S</span><span class=""mord mtight"">∣</span></span></span></span><span style=""top:-3.23em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""frac-line"" style=""border-bottom-width:0.04em;""></span></span><span style=""top:-3.394em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight""><span class=""mord mathnormal mtight"">d</span></span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.52em;""><span></span></span></span></span></span><span class=""mclose nulldelimiter""></span></span></span></span></span> (notation: <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord"">∣</span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span><span class=""mord"">∣</span></span></span></span> denotes the <em>order</em> of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span></span></span></span>, i.e. the number of values in the set <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span></span></span></span>). For a sufficiently large <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span></span></span></span> compared to <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span>, this probability will approach 0.</li>
</ul>
<p>since case 2 is extremely unlikely we can assert with high probability that the two polynomials were identical.</p>
<p><strong>Formalities - only for those who want them</strong>: the lemma itself does not compare polynomials but instead is interested in the probability that a polynomial evaluates to 0. Notice that a non-zero polynomial of degree <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span> has at most <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span> roots (if it had more roots, it would be of higher degree!). Therefore let <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span> be a non-zero polynomial of degree <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span></span></span></span> be the evaluation domain of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"">p</span></span></span></span>, and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"" style=""margin-right:0.02778em;"">r</span></span></span></span> an element of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span></span></span></span> chosen uniformly at random, we can write:</p>
<p><span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord text""><span class=""mord"">Pr</span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""minner""><span class=""mopen delimcenter"" style=""top:0em;"">[</span><span class=""mord mathnormal"">p</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.02778em;"">r</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mord"">0</span><span class=""mclose delimcenter"" style=""top:0em;"">]</span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≤</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:2.3074em;vertical-align:-0.936em;""></span><span class=""mord""><span class=""mopen nulldelimiter""></span><span class=""mfrac""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:1.3714em;""><span style=""top:-2.314em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord"">∣</span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span><span class=""mord"">∣</span></span></span><span style=""top:-3.23em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""frac-line"" style=""border-bottom-width:0.04em;""></span></span><span style=""top:-3.677em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord mathnormal"">d</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.936em;""><span></span></span></span></span></span><span class=""mclose nulldelimiter""></span></span></span></span></span></span></p>
<p>When <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7335em;vertical-align:-0.0391em;""></span><span class=""mord mathnormal"">d</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">&lt;&lt;</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord"">∣</span><span class=""mord mathnormal"" style=""margin-right:0.05764em;"">S</span><span class=""mord"">∣</span></span></span></span>, this probability is negligible. Therefore if for a value <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"" style=""margin-right:0.02778em;"">r</span></span></span></span> uniformly chosen at random we find that <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.02778em;"">r</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>, it is overwhelmingly likely that <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">q</span></span></span></span> is the zero polynomial. To check whether two polynomials <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8889em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.10764em;"">f</span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.625em;vertical-align:-0.1944em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">g</span></span></span></span> are identical, we can check whether the polynomial <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"">h</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"" style=""margin-right:0.10764em;"">f</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03588em;"">g</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span></span></span></span> is the zero polynomial.</p>

                    "
SNARK (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Acronym: succinct non-interactive argument of knowledge.</em> An argument system in which a Prover can produce a short, single-message proof attesting that she knows some information that shows the truth of a statement.</p>
</blockquote>
<hr>
<p>In this article, we will define a number of notions relevant to proof systems and SNARKs by using the example of a <a href=""https://en.wikipedia.org/wiki/Sudoku"">Sudoku grid</a>. Look out for words in bold: these are common jargon words which get mapped to our simple example.</p>
<h2 id=""statement-instance-and-witness""><a class=""header"" href=""#statement-instance-and-witness"">Statement, Instance and Witness</a></h2>
<p>Let’s consider a Sudoku grid, a specific <strong>instance</strong> of a problem. Alice makes the following <strong>statement</strong>: “This grid has a solution”. If it exists, this solution would be a <strong>witness</strong> to the fact that the statement is true. But maybe the grid is hard to solve and just looking at the instance (the grid) is not enough to be convinced that a witness (a solution) exists. What can Alice do to convince us that the witness exists?</p>
<p><img src=""https://zkjargon.github.io/images/inst_stat_wit.png"" alt=""""></p>
<h2 id=""proof-vs-argument""><a class=""header"" href=""#proof-vs-argument"">Proof vs Argument</a></h2>
<p>To support her statement, Alice shows us that the Sudoku grid has been published in many well-known and respected newspapers. In most cases this would be enough to convince us that the statement is true: surely they wouldn’t publish a “wrong” grid. However, if Alice were very powerful she could have been able to produce modified copies of the papers, or pay the news editors to include an unsolvable grid. Because there is still a small chance that Alice is cheating, we do not say that Alice produced an irrefutable <strong>proof</strong> but rather say that Alice has produced an <strong>argument</strong>.</p>
<p>More formally, a proof cannot be falsified by a computationally unbounded adversary. On the other hand an argument can be falsified by such an adversarial prover. In practice, the bound can be set so high that we estimate that no entity in the world would be able to reliably operate above such a bound. With that in mind, we often abuse the distinction above and use the word “proof” to describe the outputs of both a proof system and an argument system.</p>
<h2 id=""arguments-of-knowledge""><a class=""header"" href=""#arguments-of-knowledge"">Arguments of Knowledge</a></h2>
<p>Notice that in her argument, Alice showed the existence of the witness but may not know the witness herself. What if her statement was “I know the solution to this grid”? Here, Alice would have to produce an <strong>argument of knowledge</strong>, one by which she can convince us that she <em>knows</em> the solution to the Sudoku. The most naive approach to demonstrate knowledge would simply be for Alice to show us the witness. Since it is impossible to show us the solution without knowing it, this would constitute  a <strong>proof of knowledge</strong>. While this proof of knowledge is <strong>non-interactive</strong>, it is not <strong>succinct</strong>: the message that Alice sent is of the same size as the witness. Can we do any better?</p>
<h2 id=""snarks""><a class=""header"" href=""#snarks"">SNARKs</a></h2>
<p>We finally get to the notion of a <strong>SNARK</strong>: a succinct non-interactive argument of knowledge. We have already learnt from the above that an argument of knowledge allows a bounded prover to show that she knows the witness that supports a statement. The additional properties of a SNARK are:</p>
<ul align=""left"">
<li>succinctness: the proof is substantially shorter than the statement or the witness.</li>
<li>non-interactive: the proof is contained in a single message.</li>
</ul>
<p>A SNARK can optionally implement the <strong>zero-knowledge</strong> property: such a SNARK reveals no information about the witness other than what can be implied by evaluating the truth of the statement. We call such a SNARK a <strong>zkSNARK</strong> (zero-knowledge SNARK). In our case, Alice could convince us that she knows the solution to the Sudoku without giving us any hints as to what the solution is!</p>
<blockquote>
<p><strong>SNARKs in Practice [Advanced].</strong>
In practice we do not look at Sudokus but instead consider an <a href=""https://zkjargon.github.io/definitions/circuit.html"">arithmetic circuit</a>. The circuit and any public inputs are the instance (just like the Sudoku 9x9 grid and the numbers that already populate it), the statement is the claim that the circuit can evaluate to a desired value, and the witness is all the prover-chosen inputs and intermediate values in the circuit. A famous result of complexity theory shows that any provable statement can be converted into this form (namely that the <a href=""https://en.wikipedia.org/wiki/Circuit_satisfiability_problem"">circuit satisfiability problem</a> is NP-complete).</p>
<p>We can write a proof for the statement about the circuit by expressing everything as polynomials and running a <a href=""https://zkjargon.github.io/definitions/polynomial_interactive_oracle_proof.html"">polynomial interactive oracle proof</a>. This proof can then be made non-interactive by using the <a href=""https://zkjargon.github.io/definitions/fiat_shamir.html"">Fiat-Shamir heuristic</a>, and succinct by using a <a href=""https://zkjargon.github.io/definitions/polynomial_commitment.html"">polynomial commitment scheme</a>.</p>
</blockquote>
<hr>
<p>See also: <a href=""https://zkjargon.github.io/definitions/instance.html"">instance</a>, <a href=""https://zkjargon.github.io/definitions/witness.html"">witness</a>, <a href=""https://zkjargon.github.io/definitions/common_reference_string.html"">common reference string</a>, <a href=""https://zkjargon.github.io/definitions/structured_reference_string.html"">structure reference string</a>, <a href=""https://zkjargon.github.io/definitions/trusted_setup.html"">trusted setup</a>, <a href=""https://zkjargon.github.io/definitions/preprocessing_snark.html"">preprocessing SNARK</a></p>

                    "
Soundness (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>Of a proof system</em>. A proof system is <em>sound</em> if, for every FALSE statement, the Prover can (almost) never produce an accepting proof.</p>
</blockquote>
<hr>
<p><em>Soundness</em> is a property of a proof system best understood as: “a malicious Prover should not be able to convince the Verifier of an invalid statement”.</p>
<p>Given a <a href=""https://zkjargon.github.io/intro_to_zk/what_is_proving.html#relations"">relation</a> <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathcal"">R</span></span></span></span> and the associated <a href=""https://zkjargon.github.io/intro_to_zk/what_is_proving.html#languages"">language</a> <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8333em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathcal"">L</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathcal mtight"">R</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span>, the mathematical expression for completeness looks often like the equation below:
<span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord"">∀</span><span class=""mord mathnormal"">x</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel""><span class=""mord""><span class=""mrel"">∈</span></span><span class=""mord vbox""><span class=""thinbox""><span class=""llap""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""inner""><span class=""mord""><span class=""mord"">/</span><span class=""mspace"" style=""margin-right:0.0556em;""></span></span></span><span class=""fix""></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:1.8em;vertical-align:-0.65em;""></span><span class=""mord""><span class=""mord mathcal"">L</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3283em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathcal mtight"">R</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mop"">Pr</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""minner""><span class=""mopen delimcenter"" style=""top:0em;""><span class=""delimsizing size2"">[</span></span><span class=""mopen"">⟨</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.9202em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.13889em;"">P</span></span><span style=""top:-3.6023em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1667em;""><span class=""mord""><del></del></span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.22222em;"">V</span><span class=""mclose"">⟩</span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mord"">1</span><span class=""mclose delimcenter"" style=""top:0em;""><span class=""delimsizing size2"">]</span></span></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≤</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">ε</span></span></span></span></span>
where <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.9202em;""></span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.9202em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.13889em;"">P</span></span><span style=""top:-3.6023em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1667em;""><span class=""mord""></span></span></span></span></span></span></span></span></span></span> is any malicious prover, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.22222em;"">V</span></span></span></span> is the honest Verifier, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1.1702em;vertical-align:-0.25em;""></span><span class=""mopen"">⟨</span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.9202em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.13889em;"">P</span></span><span style=""top:-3.6023em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1667em;""><span class=""mord""><del></del></span></span></span></span></span></span></span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord mathnormal"" style=""margin-right:0.22222em;"">V</span><span class=""mclose"">⟩</span><span class=""mopen"">(</span><span class=""mord mathnormal"">x</span><span class=""mclose"">)</span></span></span></span> denotes the bit output by <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6833em;""></span><span class=""mord mathnormal"" style=""margin-right:0.22222em;"">V</span></span></span></span> at the end of the interaction with <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.9202em;""></span><span class=""mord accent""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.9202em;""><span style=""top:-3em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord mathnormal"" style=""margin-right:0.13889em;"">P</span></span><span style=""top:-3.6023em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""accent-body"" style=""left:-0.1667em;""><span class=""mord""></span></span></span></span></span></span></span></span></span></span> for the instance <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">x</span></span></span></span> and <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">ε</span></span></span></span> is a small number. We call <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">ε</span></span></span></span> the <em>soundness error</em>.</p>
<blockquote>
<p><strong>Statistical vs Computational Soundness.</strong>
The notion of soundness described above is known as <em>statistical soundness</em> or <em>information-theoretic soundness</em>. It considers all possible adversaries, including those with unlimited resources. In most real-world applications, we are only concerned with <em>bounded adversaries</em>: we usually limit ourselves to adversaries running probabilistic polynomial-time algorithms. This adversarial model is formalised by the notion of an argument (rather than a proof, see our discussion <a href=""https://zkjargon.github.io/definitions/snark.html#proof-vs-argument"">here</a>) and that of <em>computational soundness</em>.</p>
<p>Computational soundness is defined in the same was as information-theoretic soundness but is only required to hold against probabilistic polynomial-time adversaries.</p>
</blockquote>
<h2 id=""stronger-soundness-variations""><a class=""header"" href=""#stronger-soundness-variations"">Stronger Soundness variations</a></h2>
<p>Soundness comes in several levels of strength. Above is the most basic version according to which an honest verifier should only accept a proof if it corresponds to a valid statement.
The following describes increasingly stronger versions of soundness.</p>
<h3 id=""knowledge-soundness""><a class=""header"" href=""#knowledge-soundness"">Knowledge Soundness</a></h3>
<p>When constructing <a href=""https://zkjargon.github.io/definitions/snark.html#arguments-of-knowledge"">arguments of knowledge</a>, a notion stronger than simple soundness is required: <em>knowledge soundness</em>. In this strenghtened scenario, an honest verifier should only accept a proof if it corresponds to a valid statement <em>and</em> it was generated by a prover who <em>knows</em> a valid <a href=""https://zkjargon.github.io/definitions/witness.html"">witness</a> for this statement.</p>
<p>Formally, this is defined in terms of an <em>extractor</em>: an argument system is said to be knowledge sound if there exists an efficient algorithm that, given the prover’s algorithm and internal state, can extract a valid witness for the proven statement. Intuitively, this models the desired property that the prover “knows” a witness for this statement.</p>
<h3 id=""simulation-knowledge-soundness-or-simulation-extractability""><a class=""header"" href=""#simulation-knowledge-soundness-or-simulation-extractability"">Simulation Knowledge Soundness (or Simulation-Extractability)</a></h3>
<p>Another useful and even stronger notion of soundness is <em>simulation-extractability</em>. Informally, it states that an honest verifier should only accept a proof if it corresponds to a valid statement and was generated by a prover who knows a valid witness, <em>even if</em> the prover is allowed to observe honestly generated proofs for arbitrary statements.</p>
<p>Intuitively, if an argument system is simulation-extractable, then it is <em>non-malleable</em>: an adversary can’t observe a proof for some statement generated by a third party and maul it into a proof for another statement for which the adversary does not know a valid witness.</p>
<p>This captures many real-world scenarios where honestly generated proofs are made public and may be seen by potential attackers. As such, it has become the “gold standard” in terms of security notions</p>

                    "
Structured Reference String (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A collection of public parameters for a protocol which were created using information that must remain secret to ensure the protocol’s security.</p>
</blockquote>
<hr>
<p><em>See <a href=""https://zkjargon.github.io/definitions/common_reference_string.html"">Common Reference String</a></em> and the note at the bottom of the page.</p>

                    "
Threshold Encryption (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A public-key encryption scheme in which the secret key is shared amongst <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">n</span></span></span></span> parties: to decrypt a ciphertext, we require that a group of strictly more than <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6151em;""></span><span class=""mord mathnormal"">t</span></span></span></span> participants collaborate; <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6151em;""></span><span class=""mord mathnormal"">t</span></span></span></span> is called the threshold.</p>
</blockquote>

                    "
Trusted Setup (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>An algorithm that determines a protocol’s public parameters using information that must remain secret to ensure the protocol’s security.</p>
</blockquote>
<hr>
<p><em>See <a href=""https://zkjargon.github.io/definitions/common_reference_string.html"">Common Reference String</a></em> and the note at the bottom of the page.</p>

                    "
Vanishing Polynomial (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>The unique polynomial of degree <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span> that evaluates to <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span> at all points of a domain of size <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6944em;""></span><span class=""mord mathnormal"">d</span></span></span></span>.</p>
</blockquote>
<hr>
<p>The vanishing polynomial over a set <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6889em;""></span><span class=""mord mathbb"">K</span></span></span></span>, often denoted <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.5806em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3322em;""><span style=""top:-2.55em;margin-left:-0.044em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathbb mtight"">K</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span>, is the polynomial which has a single root at each element of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6889em;""></span><span class=""mord mathbb"">K</span></span></span></span>. It can be explicitly written as:</p>
<p><span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3322em;""><span style=""top:-2.55em;margin-left:-0.044em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathbb mtight"">K</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:2.3795em;vertical-align:-1.3295em;""></span><span class=""mop op-limits""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:1.05em;""><span style=""top:-1.8479em;margin-left:0em;""><span class=""pstrut"" style=""height:3.05em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight""><span class=""mord mathnormal mtight"" style=""margin-right:0.03148em;"">k</span><span class=""mrel mtight"">∈</span><span class=""mord mathbb mtight"">K</span></span></span></span><span style=""top:-3.05em;""><span class=""pstrut"" style=""height:3.05em;""></span><span><span class=""mop op-symbol large-op"">∏</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:1.3295em;""><span></span></span></span></span></span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03148em;"">k</span><span class=""mclose"">)</span></span></span></span></span></p>
<p>By definition, the vanishing polynomial over <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6889em;""></span><span class=""mord mathbb"">K</span></span></span></span> will have the following properties:</p>
<ul align=""left"">
<li>it is unique.</li>
<li>it is of degree <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord"">∣</span><span class=""mord mathbb"">K</span><span class=""mord"">∣</span></span></span></span>.</li>
<li>for all <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.7335em;vertical-align:-0.0391em;""></span><span class=""mord mathnormal"" style=""margin-right:0.03148em;"">k</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">∈</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6889em;""></span><span class=""mord mathbb"">K</span></span></span></span>, <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3322em;""><span style=""top:-2.55em;margin-left:-0.044em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathbb mtight"">K</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.03148em;"">k</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">0</span></span></span></span>. (Hence the name vanishing!)</li>
</ul>
<blockquote>
<p><strong>Vanishing Polynomial for Roots of Unity.</strong> When the set <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6889em;""></span><span class=""mord mathbb"">K</span></span></span></span> is a set of <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.4306em;""></span><span class=""mord mathnormal"">n</span></span></span></span>-th <a href=""https://zkjargon.github.io/definitions/roots_of_unity.html"">roots of unity</a>, the vanishing polynomial can be expressed as:
<span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3322em;""><span style=""top:-2.55em;margin-left:-0.044em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathbb mtight"">K</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">=</span><span class=""mspace"" style=""margin-right:0.2778em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.7977em;vertical-align:-0.0833em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.7144em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathnormal mtight"">n</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span></span><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">1</span></span></span></span></span>
To see why this is the case, let’s consider the set <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:1em;vertical-align:-0.25em;""></span><span class=""minner""><span class=""mopen delimcenter"" style=""top:0em;"">{</span><span class=""mord"">1</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">2</span><span class=""mpunct"">,</span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">4</span><span class=""mclose delimcenter"" style=""top:0em;"">}</span></span></span></span></span> which we know are the <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.6444em;""></span><span class=""mord"">3</span></span></span></span>-rd roots of unity in <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.8389em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathbb"">F</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3011em;""><span style=""top:-2.55em;margin-left:0em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">7</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> (see the <a href=""https://zkjargon.github.io/definitions/roots_of_unity.html#example-in-a-finite-field"">Roots of Unity</a> article):
<span class=""katex-display""><span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:7.5964em;vertical-align:-3.5482em;""></span><span class=""mord""><span class=""mtable""><span class=""col-align-r""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:4.0482em;""><span style=""top:-6.2082em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3322em;""><span style=""top:-2.55em;margin-left:-0.044em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathbb mtight"">K</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mclose"">)</span></span></span><span style=""top:-4.6841em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""></span></span><span style=""top:-3.16em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""></span></span><span style=""top:-1.6359em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""></span></span><span style=""top:-0.1118em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:3.5482em;""><span></span></span></span></span></span><span class=""col-align-l""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:4.0482em;""><span style=""top:-6.2082em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord""></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≡</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">1</span><span class=""mclose"">)</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">2</span><span class=""mclose"">)</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">4</span><span class=""mclose"">)</span></span></span><span style=""top:-4.6841em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord""></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≡</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mopen"">(</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">3</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">2</span><span class=""mclose"">)</span><span class=""mopen"">(</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">4</span><span class=""mclose"">)</span></span></span><span style=""top:-3.16em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord""></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≡</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">4</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">3</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">12</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">2</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">8</span></span></span><span style=""top:-1.6359em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord""></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≡</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">7</span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">2</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">+</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">14</span><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">8</span></span></span><span style=""top:-0.1118em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mord""></span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mrel"">≡</span><span class=""mspace"" style=""margin-right:0.2778em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.07847em;"">X</span><span class=""msupsub""><span class=""vlist-t""><span class=""vlist-r""><span class=""vlist"" style=""height:0.8641em;""><span style=""top:-3.113em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mtight"">3</span></span></span></span></span></span></span></span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mbin"">−</span><span class=""mspace"" style=""margin-right:0.2222em;""></span><span class=""mord"">1</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:3.5482em;""><span></span></span></span></span></span><span class=""arraycolsep"" style=""width:1em;""></span><span class=""col-align-r""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:4.0482em;""><span style=""top:-6.2082em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mopen"">(</span><span class=""mord text""><span class=""mord"">mod</span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">7</span><span class=""mclose"">)</span></span></span><span style=""top:-4.6841em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mopen"">(</span><span class=""mord text""><span class=""mord"">mod</span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">7</span><span class=""mclose"">)</span></span></span><span style=""top:-3.16em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mopen"">(</span><span class=""mord text""><span class=""mord"">mod</span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">7</span><span class=""mclose"">)</span></span></span><span style=""top:-1.6359em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mopen"">(</span><span class=""mord text""><span class=""mord"">mod</span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">7</span><span class=""mclose"">)</span></span></span><span style=""top:-0.1118em;""><span class=""pstrut"" style=""height:3em;""></span><span class=""mord""><span class=""mopen"">(</span><span class=""mord text""><span class=""mord"">mod</span></span><span class=""mspace"" style=""margin-right:0.1667em;""></span><span class=""mord"">7</span><span class=""mclose"">)</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:3.5482em;""><span></span></span></span></span></span></span></span></span></span></span></span>
Why does this matter? Expressing <span class=""katex""><span class=""katex-html"" aria-hidden=""true""><span class=""base""><span class=""strut"" style=""height:0.5806em;vertical-align:-0.15em;""></span><span class=""mord""><span class=""mord mathnormal"" style=""margin-right:0.04398em;"">z</span><span class=""msupsub""><span class=""vlist-t vlist-t2""><span class=""vlist-r""><span class=""vlist"" style=""height:0.3322em;""><span style=""top:-2.55em;margin-left:-0.044em;margin-right:0.05em;""><span class=""pstrut"" style=""height:2.7em;""></span><span class=""sizing reset-size6 size3 mtight""><span class=""mord mathbb mtight"">K</span></span></span></span><span class=""vlist-s"">​</span></span><span class=""vlist-r""><span class=""vlist"" style=""height:0.15em;""><span></span></span></span></span></span></span></span></span></span> in this way makes it very efficient to evaluate it at one point!</p>
</blockquote>

                    "
Witness (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p><em>(Of a general purpose <a href=""https://zkjargon.github.io/definitions/snark.html"">SNARK</a>)</em>. All the <a href=""https://zkjargon.github.io/definitions/circuit.html"">circuit</a> variables that the verifier does not see: the prover’s private inputs and all the intermediate values computed in the circuit.</p>
</blockquote>
<p>In a general purpose <a href=""https://zkjargon.github.io/definitions/snark.html"">SNARK</a>, we call the <strong>witness</strong> the collection of values that the verifier does not read; either because they are private to the prover, or because they are too long to satisfy the <a href=""https://zkjargon.github.io/definitions/snark.html#snarks"">succinctness</a> property.</p>
<p>Consider the following example:</p>
<blockquote>
<p>Peggy sends a string <code class=""hljs"">string</code> to Victor and wants to convince him that she knows a secret value <code class=""hljs"">seed</code> such that applying the <code class=""hljs"">Keccak</code> hash 1000 times to it produces <code class=""hljs"">string</code>. That is, <code class=""hljs"">string = Keccak(Keccak(...(Keccak(seed)...)))</code>.</p>
<p>Peggy and Victor therefore agree on a SNARK circuit that takes <code class=""hljs"">seed</code> as a private input and <code class=""hljs"">string</code> as a public input. The circuit applies Keccak once to <code class=""hljs"">seed</code> to produce a 1st intermediate value. This value is then fed into Keccak again, producing another intermediate value. This process is repeated 1000 times until a final value is produced. Finally, this last value is compared to <code class=""hljs"">string</code>.</p>
</blockquote>
<p>In this example, Peggy wants to keep the value <code class=""hljs"">seed</code> secret, so it must certainly be part of the witness. Secondly, notice that the circuit produces 1000 intermediate values. Victor (rightfully so) doesn’t care about these values and shouldn’t have to read through them! He just wants to see <code class=""hljs"">string</code> and a short proof that Peggy is saying the truth. So the 1000 intermediate values are also part of the witness.</p>

                    "
Zero-knowledge Proof (ZK Jargon Decoder)¬"
                        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css"" integrity=""sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X"" crossorigin=""anonymous"">
<blockquote>
<p>A proof that reveals no more information than the validity of the statement it supports.</p>
</blockquote>
<p><em>COMING SOON.</em></p>

                    "
